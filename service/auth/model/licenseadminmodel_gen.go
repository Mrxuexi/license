// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	licenseAdminFieldNames          = builder.RawFieldNames(&LicenseAdmin{})
	licenseAdminRows                = strings.Join(licenseAdminFieldNames, ",")
	licenseAdminRowsExpectAutoSet   = strings.Join(stringx.Remove(licenseAdminFieldNames, "`auto_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	licenseAdminRowsWithPlaceHolder = strings.Join(stringx.Remove(licenseAdminFieldNames, "`auto_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLicenseAdminAutoIdPrefix = "cache:licenseAdmin:autoId:"
)

type (
	licenseAdminModel interface {
		Insert(ctx context.Context, data *LicenseAdmin) (sql.Result, error)
		FindOne(ctx context.Context, autoId int64) (*LicenseAdmin, error)
		Update(ctx context.Context, data *LicenseAdmin) error
		Delete(ctx context.Context, autoId int64) error
	}

	defaultLicenseAdminModel struct {
		sqlc.CachedConn
		table string
	}

	LicenseAdmin struct {
		AutoId    int64     `db:"auto_id"`    // 软件服务提供商ID，主键
		Username  string    `db:"username"`   // 用户名称，不为空
		Password  string    `db:"password"`   // 登录密码，不为空
		Account   string    `db:"account"`    // 账号，不为空
		Phone     string    `db:"phone"`      // 联系方式，不为空
		IsDeleted int64     `db:"is_deleted"` // 软删除，不为空
		CreatedAt time.Time `db:"created_at"` // 创建时间，不为空，自动更新
		UpdatedAt time.Time `db:"updated_at"` // 更新时间，不为空，自动更新
		DeletedAt time.Time `db:"deleted_at"` // 删除时间，不为空，自动更新
	}
)

func newLicenseAdminModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLicenseAdminModel {
	return &defaultLicenseAdminModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`license_admin`",
	}
}

func (m *defaultLicenseAdminModel) Delete(ctx context.Context, autoId int64) error {
	licenseAdminAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseAdminAutoIdPrefix, autoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `auto_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, autoId)
	}, licenseAdminAutoIdKey)
	return err
}

func (m *defaultLicenseAdminModel) FindOne(ctx context.Context, autoId int64) (*LicenseAdmin, error) {
	licenseAdminAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseAdminAutoIdPrefix, autoId)
	var resp LicenseAdmin
	err := m.QueryRowCtx(ctx, &resp, licenseAdminAutoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `auto_id` = ? limit 1", licenseAdminRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, autoId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLicenseAdminModel) Insert(ctx context.Context, data *LicenseAdmin) (sql.Result, error) {
	licenseAdminAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseAdminAutoIdPrefix, data.AutoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, licenseAdminRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Account, data.Phone, data.IsDeleted, data.DeletedAt)
	}, licenseAdminAutoIdKey)
	return ret, err
}

func (m *defaultLicenseAdminModel) Update(ctx context.Context, data *LicenseAdmin) error {
	licenseAdminAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseAdminAutoIdPrefix, data.AutoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `auto_id` = ?", m.table, licenseAdminRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Account, data.Phone, data.IsDeleted, data.DeletedAt, data.AutoId)
	}, licenseAdminAutoIdKey)
	return err
}

func (m *defaultLicenseAdminModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLicenseAdminAutoIdPrefix, primary)
}

func (m *defaultLicenseAdminModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `auto_id` = ? limit 1", licenseAdminRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLicenseAdminModel) tableName() string {
	return m.table
}
