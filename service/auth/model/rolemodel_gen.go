// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleFieldNames          = builder.RawFieldNames(&Role{})
	roleRows                = strings.Join(roleFieldNames, ",")
	roleRowsExpectAutoSet   = strings.Join(stringx.Remove(roleFieldNames, "`auto_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roleRowsWithPlaceHolder = strings.Join(stringx.Remove(roleFieldNames, "`auto_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRoleAutoIdPrefix = "cache:role:autoId:"
)

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) (sql.Result, error)
		FindOne(ctx context.Context, autoId int64) (*Role, error)
		Update(ctx context.Context, data *Role) error
		Delete(ctx context.Context, autoId int64) error
	}

	defaultRoleModel struct {
		sqlc.CachedConn
		table string
	}

	Role struct {
		AutoId    int64     `db:"auto_id"`    // 角色ID，主键
		RoleName  string    `db:"role_name"`  // 角色名称，不为空
		IsDeleted int64     `db:"is_deleted"` // 软删除，不为空
		CreatedAt time.Time `db:"created_at"` // 创建时间，不为空，自动更新
		UpdatedAt time.Time `db:"updated_at"` // 更新时间，不为空，自动更新
		DeletedAt time.Time `db:"deleted_at"` // 删除时间，不为空，自动更新
	}
)

func newRoleModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRoleModel {
	return &defaultRoleModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`role`",
	}
}

func (m *defaultRoleModel) Delete(ctx context.Context, autoId int64) error {
	roleAutoIdKey := fmt.Sprintf("%s%v", cacheRoleAutoIdPrefix, autoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `auto_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, autoId)
	}, roleAutoIdKey)
	return err
}

func (m *defaultRoleModel) FindOne(ctx context.Context, autoId int64) (*Role, error) {
	roleAutoIdKey := fmt.Sprintf("%s%v", cacheRoleAutoIdPrefix, autoId)
	var resp Role
	err := m.QueryRowCtx(ctx, &resp, roleAutoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `auto_id` = ? limit 1", roleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, autoId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (sql.Result, error) {
	roleAutoIdKey := fmt.Sprintf("%s%v", cacheRoleAutoIdPrefix, data.AutoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, roleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleName, data.IsDeleted, data.DeletedAt)
	}, roleAutoIdKey)
	return ret, err
}

func (m *defaultRoleModel) Update(ctx context.Context, data *Role) error {
	roleAutoIdKey := fmt.Sprintf("%s%v", cacheRoleAutoIdPrefix, data.AutoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `auto_id` = ?", m.table, roleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RoleName, data.IsDeleted, data.DeletedAt, data.AutoId)
	}, roleAutoIdKey)
	return err
}

func (m *defaultRoleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRoleAutoIdPrefix, primary)
}

func (m *defaultRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `auto_id` = ? limit 1", roleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}
