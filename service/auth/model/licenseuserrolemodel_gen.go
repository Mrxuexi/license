// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	licenseUserRoleFieldNames          = builder.RawFieldNames(&LicenseUserRole{})
	licenseUserRoleRows                = strings.Join(licenseUserRoleFieldNames, ",")
	licenseUserRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(licenseUserRoleFieldNames, "`auto_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	licenseUserRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(licenseUserRoleFieldNames, "`auto_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLicenseUserRoleAutoIdPrefix = "cache:licenseUserRole:autoId:"
)

type (
	licenseUserRoleModel interface {
		Insert(ctx context.Context, data *LicenseUserRole) (sql.Result, error)
		FindOne(ctx context.Context, autoId int64) (*LicenseUserRole, error)
		Update(ctx context.Context, data *LicenseUserRole) error
		Delete(ctx context.Context, autoId int64) error
	}

	defaultLicenseUserRoleModel struct {
		sqlc.CachedConn
		table string
	}

	LicenseUserRole struct {
		AutoId        int64        `db:"auto_id"`         // 用户角色ID
		LicenseUserId int64        `db:"license_user_id"` // 授权操作用户ID
		RoleId        int64        `db:"role_id"`         // 角色ID
		IsDeleted     int64        `db:"is_deleted"`      // 软删除
		CreatedAt     time.Time    `db:"created_at"`      // 创建时间
		UpdatedAt     time.Time    `db:"updated_at"`      // 更新时间
		DeletedAt     sql.NullTime `db:"deleted_at"`      // 删除时间
	}
)

func newLicenseUserRoleModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLicenseUserRoleModel {
	return &defaultLicenseUserRoleModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`license_user_role`",
	}
}

func (m *defaultLicenseUserRoleModel) Delete(ctx context.Context, autoId int64) error {
	licenseUserRoleAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseUserRoleAutoIdPrefix, autoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `auto_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, autoId)
	}, licenseUserRoleAutoIdKey)
	return err
}

func (m *defaultLicenseUserRoleModel) FindOne(ctx context.Context, autoId int64) (*LicenseUserRole, error) {
	licenseUserRoleAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseUserRoleAutoIdPrefix, autoId)
	var resp LicenseUserRole
	err := m.QueryRowCtx(ctx, &resp, licenseUserRoleAutoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `auto_id` = ? limit 1", licenseUserRoleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, autoId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLicenseUserRoleModel) Insert(ctx context.Context, data *LicenseUserRole) (sql.Result, error) {
	licenseUserRoleAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseUserRoleAutoIdPrefix, data.AutoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, licenseUserRoleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.LicenseUserId, data.RoleId, data.IsDeleted, data.DeletedAt)
	}, licenseUserRoleAutoIdKey)
	return ret, err
}

func (m *defaultLicenseUserRoleModel) Update(ctx context.Context, data *LicenseUserRole) error {
	licenseUserRoleAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseUserRoleAutoIdPrefix, data.AutoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `auto_id` = ?", m.table, licenseUserRoleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.LicenseUserId, data.RoleId, data.IsDeleted, data.DeletedAt, data.AutoId)
	}, licenseUserRoleAutoIdKey)
	return err
}

func (m *defaultLicenseUserRoleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLicenseUserRoleAutoIdPrefix, primary)
}

func (m *defaultLicenseUserRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `auto_id` = ? limit 1", licenseUserRoleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLicenseUserRoleModel) tableName() string {
	return m.table
}
