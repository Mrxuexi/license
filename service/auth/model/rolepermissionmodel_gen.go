// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rolePermissionFieldNames          = builder.RawFieldNames(&RolePermission{})
	rolePermissionRows                = strings.Join(rolePermissionFieldNames, ",")
	rolePermissionRowsExpectAutoSet   = strings.Join(stringx.Remove(rolePermissionFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rolePermissionRowsWithPlaceHolder = strings.Join(stringx.Remove(rolePermissionFieldNames, "`auto_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRolePermissionAutoIdPrefix = "cache:rolePermission:autoId:"
)

type (
	rolePermissionModel interface {
		Insert(ctx context.Context, data *RolePermission) (sql.Result, error)
		FindOne(ctx context.Context, autoId int64) (*RolePermission, error)
		Update(ctx context.Context, data *RolePermission) error
		Delete(ctx context.Context, autoId int64) error
	}

	defaultRolePermissionModel struct {
		sqlc.CachedConn
		table string
	}

	RolePermission struct {
		AutoId       int64     `db:"auto_id"`       // 用户角色ID 主键
		PermissionId int64     `db:"permission_id"` // 权限ID 外键，权限（ID）
		RoleId       int64     `db:"role_id"`       // 角色ID 外键，角色（ID）
		IsDeleted    int64     `db:"is_deleted"`    // 软删除 不为空
		CreatedAt    time.Time `db:"created_at"`    // 创建时间 不为空，自动更新
		UpdatedAt    time.Time `db:"updated_at"`    // 更新时间 不为空，自动更新
		DeletedAt    time.Time `db:"deleted_at"`    // 删除时间 不为空，自动更新
	}
)

func newRolePermissionModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRolePermissionModel {
	return &defaultRolePermissionModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`role_permission`",
	}
}

func (m *defaultRolePermissionModel) Delete(ctx context.Context, autoId int64) error {
	rolePermissionAutoIdKey := fmt.Sprintf("%s%v", cacheRolePermissionAutoIdPrefix, autoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `auto_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, autoId)
	}, rolePermissionAutoIdKey)
	return err
}

func (m *defaultRolePermissionModel) FindOne(ctx context.Context, autoId int64) (*RolePermission, error) {
	rolePermissionAutoIdKey := fmt.Sprintf("%s%v", cacheRolePermissionAutoIdPrefix, autoId)
	var resp RolePermission
	err := m.QueryRowCtx(ctx, &resp, rolePermissionAutoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `auto_id` = ? limit 1", rolePermissionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, autoId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRolePermissionModel) Insert(ctx context.Context, data *RolePermission) (sql.Result, error) {
	rolePermissionAutoIdKey := fmt.Sprintf("%s%v", cacheRolePermissionAutoIdPrefix, data.AutoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, rolePermissionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AutoId, data.PermissionId, data.RoleId, data.IsDeleted, data.DeletedAt)
	}, rolePermissionAutoIdKey)
	return ret, err
}

func (m *defaultRolePermissionModel) Update(ctx context.Context, data *RolePermission) error {
	rolePermissionAutoIdKey := fmt.Sprintf("%s%v", cacheRolePermissionAutoIdPrefix, data.AutoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `auto_id` = ?", m.table, rolePermissionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PermissionId, data.RoleId, data.IsDeleted, data.DeletedAt, data.AutoId)
	}, rolePermissionAutoIdKey)
	return err
}

func (m *defaultRolePermissionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRolePermissionAutoIdPrefix, primary)
}

func (m *defaultRolePermissionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `auto_id` = ? limit 1", rolePermissionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRolePermissionModel) tableName() string {
	return m.table
}
