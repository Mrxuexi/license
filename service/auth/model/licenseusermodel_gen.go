// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	licenseUserFieldNames          = builder.RawFieldNames(&LicenseUser{})
	licenseUserRows                = strings.Join(licenseUserFieldNames, ",")
	licenseUserRowsExpectAutoSet   = strings.Join(stringx.Remove(licenseUserFieldNames, "`auto_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	licenseUserRowsWithPlaceHolder = strings.Join(stringx.Remove(licenseUserFieldNames, "`auto_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLicenseUserAutoIdPrefix = "cache:licenseUser:autoId:"
)

type (
	licenseUserModel interface {
		Insert(ctx context.Context, data *LicenseUser) (sql.Result, error)
		FindOne(ctx context.Context, autoId int64) (*LicenseUser, error)
		Update(ctx context.Context, data *LicenseUser) error
		Delete(ctx context.Context, autoId int64) error
	}

	defaultLicenseUserModel struct {
		sqlc.CachedConn
		table string
	}

	LicenseUser struct {
		AutoId          int64          `db:"auto_id"`           // 授权操作用户ID，主键
		Username        string         `db:"username"`          // 用户名称，不为空
		Password        string         `db:"password"`          // 登录密码，不为空
		Account         string         `db:"account"`           // 账号，不为空
		AccessKeyId     sql.NullString `db:"access_key_id"`     // 访问密钥 ID
		SecretAccessKey sql.NullString `db:"secret_access_key"` // 私密访问密钥
		Phone           string         `db:"phone"`             // 联系方式，不为空
		IsDeleted       int64          `db:"is_deleted"`        // 软删除，不为空
		CreatedAt       time.Time      `db:"created_at"`        // 创建时间，不为空，自动更新
		UpdatedAt       time.Time      `db:"updated_at"`        // 更新时间，不为空，自动更新
		DeletedAt       time.Time      `db:"deleted_at"`        // 删除时间，不为空，自动更新
	}
)

func newLicenseUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLicenseUserModel {
	return &defaultLicenseUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`license_user`",
	}
}

func (m *defaultLicenseUserModel) Delete(ctx context.Context, autoId int64) error {
	licenseUserAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseUserAutoIdPrefix, autoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `auto_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, autoId)
	}, licenseUserAutoIdKey)
	return err
}

func (m *defaultLicenseUserModel) FindOne(ctx context.Context, autoId int64) (*LicenseUser, error) {
	licenseUserAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseUserAutoIdPrefix, autoId)
	var resp LicenseUser
	err := m.QueryRowCtx(ctx, &resp, licenseUserAutoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `auto_id` = ? limit 1", licenseUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, autoId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLicenseUserModel) Insert(ctx context.Context, data *LicenseUser) (sql.Result, error) {
	licenseUserAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseUserAutoIdPrefix, data.AutoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, licenseUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Account, data.AccessKeyId, data.SecretAccessKey, data.Phone, data.IsDeleted, data.DeletedAt)
	}, licenseUserAutoIdKey)
	return ret, err
}

func (m *defaultLicenseUserModel) Update(ctx context.Context, data *LicenseUser) error {
	licenseUserAutoIdKey := fmt.Sprintf("%s%v", cacheLicenseUserAutoIdPrefix, data.AutoId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `auto_id` = ?", m.table, licenseUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Account, data.AccessKeyId, data.SecretAccessKey, data.Phone, data.IsDeleted, data.DeletedAt, data.AutoId)
	}, licenseUserAutoIdKey)
	return err
}

func (m *defaultLicenseUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLicenseUserAutoIdPrefix, primary)
}

func (m *defaultLicenseUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `auto_id` = ? limit 1", licenseUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLicenseUserModel) tableName() string {
	return m.table
}
